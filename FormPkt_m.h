//
// Generated file, do not edit! Created by nedtool 4.6 from FormPkt.msg.
//

#ifndef _FORMPKT_M_H_
#define _FORMPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "SimpleAddress.h"
// }}

/**
 * Class generated from <tt>FormPkt.msg:23</tt> by nedtool.
 * <pre>
 * packet FormPkt
 * {
 *     LAddress::L3Type destAddr = LAddress::L3BROADCAST; // destination address
 *     LAddress::L3Type srcAddr = LAddress::L3BROADCAST; // source address
 *     double positionX = 0.00; // source x_position 
 *     double positionY = 0.00; // source y_position
 *     double speedX = 0.00; // source x_speed 
 *     double speedY = 0.00; // source y_speed
 *     double accelerationX = 0.00; // source x_acceleration 
 *     double accelerationY = 0.00; // source y_acceleration
 * }
 * </pre>
 */
class FormPkt : public ::cPacket
{
  protected:
    LAddress::L3Type destAddr_var;
    LAddress::L3Type srcAddr_var;
    double positionX_var;
    double positionY_var;
    double speedX_var;
    double speedY_var;
    double accelerationX_var;
    double accelerationY_var;

  private:
    void copy(const FormPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FormPkt&);

  public:
    FormPkt(const char *name=NULL, int kind=0);
    FormPkt(const FormPkt& other);
    virtual ~FormPkt();
    FormPkt& operator=(const FormPkt& other);
    virtual FormPkt *dup() const {return new FormPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual LAddress::L3Type& getDestAddr();
    virtual const LAddress::L3Type& getDestAddr() const {return const_cast<FormPkt*>(this)->getDestAddr();}
    virtual void setDestAddr(const LAddress::L3Type& destAddr);
    virtual LAddress::L3Type& getSrcAddr();
    virtual const LAddress::L3Type& getSrcAddr() const {return const_cast<FormPkt*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const LAddress::L3Type& srcAddr);
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getSpeedX() const;
    virtual void setSpeedX(double speedX);
    virtual double getSpeedY() const;
    virtual void setSpeedY(double speedY);
    virtual double getAccelerationX() const;
    virtual void setAccelerationX(double accelerationX);
    virtual double getAccelerationY() const;
    virtual void setAccelerationY(double accelerationY);
};

inline void doPacking(cCommBuffer *b, FormPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FormPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _FORMPKT_M_H_

